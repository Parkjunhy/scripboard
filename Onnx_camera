import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Point
import onnxruntime as ort
import numpy as np
import cv2

class FireDetectionNode(Node):
    def __init__(self):
        super().__init__('fire_detection_node')
        self.publisher_ = self.create_publisher(Point, 'fire_detection/coordinates', 10)

        # ONNX model load
        self.session = ort.InferenceSession('yolov5s.onnx')

        # camera initialize
        self.cap = cv2.VideoCapture(0)  # Raspberry Pi camera module

    def detect_and_publish(self):
        ret, frame = self.cap.read()
        if not ret:
            self.get_logger().error('Failed to capture image from camera.')
            return

        # YOLO model detection
        input_data = self.preprocess_image(frame)
        outputs = self.session.run(None, {self.session.get_inputs()[0].name: input_data})

        # coordinate
        self.process_detections(outputs)

    def preprocess_image(self, frame):
        # image process 
        img = cv2.resize(frame, (640, 640))  # YOLOv5 initial size
        img = img.transpose((2, 0, 1))  # HWC to CHW
        img = np.expand_dims(img, axis=0)
        img = img.astype(np.float32)
        img /= 255.0
        return img

    def process_detections(self, outputs):
        detections = outputs[0]  # results
        for detection in detections:
            x_center = detection[0]
            y_center = detection[1]

            point_msg = Point()
            point_msg.x = x_center
            point_msg.y = y_center
            point_msg.z = 0.0

            self.publisher_.publish(point_msg)
            self.get_logger().info(f'Detected fire at coordinates: x={x_center}, y={y_center}')

def main(args=None):
    rclpy.init(args=args)
    node = FireDetectionNode()

    try:
        while rclpy.ok():
            node.detect_and_publish()
    except KeyboardInterrupt:
        pass
    finally:
        node.cap.release()
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
