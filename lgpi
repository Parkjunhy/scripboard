import rclpy
from rclpy.node import Node
from std_msgs.msg import String

class MotorCommandPublisher(Node):
    def __init__(self):
        super().__init__('motor_command_publisher')
        self.publisher_ = self.create_publisher(String, 'motor_command', 10)

        # 타이머 설정 (5초마다 명령을 퍼블리시)
        timer_period = 5.0  # 초 단위
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.step = 0  # 단계 설정

    def timer_callback(self):
        msg = String()

        # 4개의 모터에 대한 명령을 순서대로 퍼블리시
        if self.step == 0:
            msg.data = 'dc1 forward 255'  # DC 모터 1을 정방향 최대 속도로
            self.get_logger().info(f'Publishing: {msg.data}')
        elif self.step == 1:
            msg.data = 'dc2 backward 200'  # DC 모터 2를 역방향으로 중간 속도로
            self.get_logger().info(f'Publishing: {msg.data}')
        elif self.step == 2:
            msg.data = 'stepper forward 100'  # 스텝 모터를 정방향으로 100 스텝
            self.get_logger().info(f'Publishing: {msg.data}')
        elif self.step == 3:
            msg.data = 'actuator extend 255'  # 리니어 액츄에이터를 최대 속도로 확장
            self.get_logger().info(f'Publishing: {msg.data}')
        elif self.step == 4:
            msg.data = 'actuator retract 255'  # 리니어 액츄에이터를 최대 속도로 수축
            self.get_logger().info(f'Publishing: {msg.data}')

        # 메시지를 퍼블리시
        self.publisher_.publish(msg)

        # 단계 순환 (0~4)
        self.step = (self.step + 1) % 5


def main(args=None):
    rclpy.init(args=args)

    motor_command_publisher = MotorCommandPublisher()

    try:
        rclpy.spin(motor_command_publisher)
    except KeyboardInterrupt:
        pass

    motor_command_publisher.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
