import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import lgpio
import time

# 핀 번호 설정
IN_A1 = 17  # DC 모터 1 방향 제어 핀 A
IN_B1 = 27  # DC 모터 1 방향 제어 핀 B
PWM1 = 18   # DC 모터 1 속도 제어 핀
EN_DIAG1 = 22  # DC 모터 1 활성화 핀

IN_A2 = 23  # DC 모터 2 방향 제어 핀 A
IN_B2 = 24  # DC 모터 2 방향 제어 핀 B
PWM2 = 25   # DC 모터 2 속도 제어 핀
EN_DIAG2 = 5  # DC 모터 2 활성화 핀

# A4988 스텝 모터 핀 설정
STEP_PIN = 19  # STEP 핀
DIR_PIN = 26   # DIR 핀
ENA_PIN = 13   # Enable 핀 (선택 사항)

# 리니어 액츄에이터 핀 설정
ACTUATOR_IN_A = 20  # 액츄에이터 방향 제어 핀 A
ACTUATOR_IN_B = 21  # 액츄에이터 방향 제어 핀 B
ACTUATOR_PWM = 16   # 액츄에이터 속도 제어 핀

class MotorController(Node):
    def __init__(self):
        super().__init__('motor_controller')
        self.subscription = self.create_subscription(
            String,
            'motor_command',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning

        # GPIO 핀 핸들러 열기
        self.chip = lgpio.gpiochip_open(0)

        # DC 모터 핀 설정
        lgpio.gpio_claim_output(self.chip, IN_A1, 0)
        lgpio.gpio_claim_output(self.chip, IN_B1, 0)
        lgpio.gpio_claim_output(self.chip, PWM1, 0)
        lgpio.gpio_claim_output(self.chip, EN_DIAG1, 0)

        lgpio.gpio_claim_output(self.chip, IN_A2, 0)
        lgpio.gpio_claim_output(self.chip, IN_B2, 0)
        lgpio.gpio_claim_output(self.chip, PWM2, 0)
        lgpio.gpio_claim_output(self.chip, EN_DIAG2, 0)

        # A4988 스텝 모터 핀 설정
        lgpio.gpio_claim_output(self.chip, STEP_PIN, 0)
        lgpio.gpio_claim_output(self.chip, DIR_PIN, 0)
        lgpio.gpio_claim_output(self.chip, ENA_PIN, 0)

        # 리니어 액츄에이터 핀 설정
        lgpio.gpio_claim_output(self.chip, ACTUATOR_IN_A, 0)
        lgpio.gpio_claim_output(self.chip, ACTUATOR_IN_B, 0)
        lgpio.gpio_claim_output(self.chip, ACTUATOR_PWM, 0)

        # 모터 드라이버 활성화
        lgpio.gpio_write(self.chip, EN_DIAG1, 1)
        lgpio.gpio_write(self.chip, EN_DIAG2, 1)

        # 스텝 모터 드라이버 활성화 (ENA 핀 설정, 필요 시만)
        lgpio.gpio_write(self.chip, ENA_PIN, 1)  # 활성화

        # PWM 설정 (단순히 HIGH 상태로 설정, 실제 PWM 기능은 외부 라이브러리 필요)
        lgpio.gpio_write(self.chip, PWM1, 1)
        lgpio.gpio_write(self.chip, PWM2, 1)

    def listener_callback(self, msg):
        command = msg.data.split()
        motor = command[0]
        direction = command[1]
        speed_or_steps = int(command[2])

        if motor == 'dc1':
            self.control_dc_motor(1, direction, speed_or_steps)
        elif motor == 'dc2':
            self.control_dc_motor(2, direction, speed_or_steps)
        elif motor == 'stepper':
            self.control_stepper_motor(direction, speed_or_steps)
        elif motor == 'actuator':
            self.control_linear_actuator(direction, speed_or_steps)

    def control_dc_motor(self, motor_num, direction, speed):
        if motor_num == 1:
            if direction == 'forward':
                lgpio.gpio_write(self.chip, IN_A1, 1)
                lgpio.gpio_write(self.chip, IN_B1, 0)
            elif direction == 'backward':
                lgpio.gpio_write(self.chip, IN_A1, 0)
                lgpio.gpio_write(self.chip, IN_B1, 1)
            self.get_logger().info(f'Motor 1: {direction} at speed {speed}')
        elif motor_num == 2:
            if direction == 'forward':
                lgpio.gpio_write(self.chip, IN_A2, 1)
                lgpio.gpio_write(self.chip, IN_B2, 0)
            elif direction == 'backward':
                lgpio.gpio_write(self.chip, IN_A2, 0)
                lgpio.gpio_write(self.chip, IN_B2, 1)
            self.get_logger().info(f'Motor 2: {direction} at speed {speed}')

    def control_stepper_motor(self, direction, steps):
        if direction == 'forward':
            lgpio.gpio_write(self.chip, DIR_PIN, 1)
        elif direction == 'backward':
            lgpio.gpio_write(self.chip, DIR_PIN, 0)

        # A4988 ENA 핀 활성화
        lgpio.gpio_write(self.chip, ENA_PIN, 1)  # 활성화

        # 스텝 모터 회전
        for _ in range(steps):
            lgpio.gpio_write(self.chip, STEP_PIN, 1)
            time.sleep(0.001)
            lgpio.gpio_write(self.chip, STEP_PIN, 0)
            time.sleep(0.001)

        # A4988 ENA 핀 비활성화 (필요 시 모터 비활성화)
        lgpio.gpio_write(self.chip, ENA_PIN, 0)  # 비활성화

        self.get_logger().info(f'Stepper Motor: {direction} for {steps} steps')

    def control_linear_actuator(self, direction, speed):
        if direction == 'extend':
            lgpio.gpio_write(self.chip, ACTUATOR_IN_A, 1)
            lgpio.gpio_write(self.chip, ACTUATOR_IN_B, 0)
        elif direction == 'retract':
            lgpio.gpio_write(self.chip, ACTUATOR_IN_A, 0)
            lgpio.gpio_write(self.chip, ACTUATOR_IN_B, 1)
        self.get_logger().info(f'Linear Actuator: {direction} at speed {speed}')

    def destroy_node(self):
        super().destroy_node()
        lgpio.gpiochip_close(self.chip)


def main(args=None):
    rclpy.init(args=args)
    motor_controller = MotorController()

    try:
        rclpy.spin(motor_controller)
    except KeyboardInterrupt:
        pass

    motor_controller.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
