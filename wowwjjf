import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from time import sleep

class PseudoAlignment(Node):

    def __init__(self):
        super().__init__('pseudo_alignment')

        # Create Publishers for DC motor control (commands for motor 1 and motor 2)
        self.left_motor_pub = self.create_publisher(String, 'dc_motor_1_command', 10)
        self.right_motor_pub = self.create_publisher(String, 'dc_motor_2_command', 10)

        # Start the movement process
        self.start_movement()

    def start_movement(self):
        left_motor_command = String()
        right_motor_command = String()

        # Step 1: Rotate clockwise for 5 seconds
        self.get_logger().info("Rotating clockwise for 5 seconds...")
        left_motor_command.data = "forward 50"  # Left motor moves forward
        right_motor_command.data = "backward 50"  # Right motor moves backward
        self.left_motor_pub.publish(left_motor_command)
        self.right_motor_pub.publish(right_motor_command)
        sleep(5)  # Rotate for 5 seconds

        # Step 2: Stop for 3 seconds
        self.get_logger().info("Stopping for 3 seconds...")
        left_motor_command.data = "forward 0"
        right_motor_command.data = "forward 0"
        self.left_motor_pub.publish(left_motor_command)
        self.right_motor_pub.publish(right_motor_command)
        sleep(3)  # Stop for 3 seconds

        # Step 3: Move forward for 10 seconds
        self.get_logger().info("Moving forward for 10 seconds...")
        left_motor_command.data = "forward 50"  # Left motor moves forward
        right_motor_command.data = "forward 50"  # Right motor moves forward
        self.left_motor_pub.publish(left_motor_command)
        self.right_motor_pub.publish(right_motor_command)
        sleep(10)  # Move forward for 10 seconds

        # Step 4: Stop after moving forward
        self.get_logger().info("Stopping after moving forward.")
        left_motor_command.data = "forward 0"
        right_motor_command.data = "forward 0"
        self.left_motor_pub.publish(left_motor_command)
        self.right_motor_pub.publish(right_motor_command)

def main(args=None):
    rclpy.init(args=args)
    pseudo_alignment = PseudoAlignment()

    try:
        rclpy.spin_once(pseudo_alignment, timeout_sec=0)  # Run the movement once
    except KeyboardInterrupt:
        pass

    pseudo_alignment.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
